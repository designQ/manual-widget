<!--
    Powered By nodePPT - This is probably the best web presentation tool so far!
    version: 1.4.2
    site: https://github.com/ksky521/nodePPT
    date: 
-->
<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <title>搭建ES6/7工作流搭建 - By 江涛</title>
    <link rel="stylesheet" media="all" href="./css/nodeppt.css">
    <link rel="stylesheet" media="only screen and (max-device-width: 480px)" href="./css/phone.css">
    
    <link rel="stylesheet" href="./js/highlight/styles/monokai_sublime.css">
    <link rel="stylesheet" href="./css/font-awesome.css">
    
<link rel="stylesheet" href="./css/theme.moon.css">
</head>
<body>
<div class="slides">
    <slides id="container">
        <slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>搭建ES6/7工作流搭建</h1>
<h2>分享人：江涛</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>背景</h1>
<blockquote>
<p>2015年6月，<code>ES2015</code>正式发布。无论 NodeJS 还是 Browser， 使用<code>ES2015</code>/<code>ES6</code>开发 提高开发效率。</p>
</blockquote>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>转码器和打包工具</h1>
<ul>
<li><a href="http://www.typescriptlang.org/" target="_blank">typescript</a></li>
<li><a href="http://babeljs.io/" target="_blank">babel</a></li>
<li><a href="https://github.com/webpack" target="_blank">webpack</a></li>
<li><a href="http://gulpjs.com/" target="_blank">gulp</a></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>以 babel5.8.3 + webpack 为例</h1>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>babel5.8.3安装</h1>
<pre><code class="javascript">npm install -g babel@5.8.3
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>babel基本命令</h1>
<ul>
<li><code>babel -w</code>      // 提供watch方法</li>
<li><code>babel -o</code>      // 输出到一个文件</li>
<li><code>babel -d</code>      // 指定要编译的目录</li>
<li><code>babel -s</code>      // 生成sourcemap</li>
<li><code>babel --help</code>  // 更多命令</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>webpack的特性 ?</h1>
<ul class="moveIn">
<li>仅需要对应的加载器即可支持，配置简单，关注文件依赖关系即可</li>
<li>用于处理文件依赖分析和进行打包，让程序员可以专注组件开发</li>
<li>兼容各种JS模块规范 - AMD、CommonJS、ES6</li>
<li>对各种资源都可支持打包 css、js/jsx、img、svg、fonts等</li>
<li>可打包成多个模块，实现公共模块、独立模块按需加载</li>
<li>支持内存打包和实时打包生成文件，性能更快</li>
</ul>

</article></section></slide>
<slide class="slide fill" style="background-image:url('./img/webpack.jpg'); background-size: contain;"><section class="slide-wrapper"></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>安装</h2>
<ul>
<li><p>可以同时安装global和local版本</p>
<pre><code class="javascript">npm install -g webpack
</code></pre>
<pre><code class="javascript">npm install --save-dev webpack
</code></pre>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>webpack 基本命令</h2>
<ul>
<li><code>webpack</code>         // 最基本的启动webpack方法</li>
<li><code>webpack -w</code>      // 提供watch方法，实时进行打包更新</li>
<li><code>webpack -p</code>      // 对打包后的文件进行压缩</li>
<li><code>webpack -d</code>      // 提供source map，方便调试。</li>
<li><code>webpack --confg</code> // 以某个config作为打包</li>
<li><code>webpack --help</code>  // 更多命令</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>webpack 使用和配置</h2>
<ul>
<li>node.js API使用：<pre><code class="javascript">var webpack = require(&#39;webpack&#39;);
</code></pre>
</li>
<li>默认使用当前目录的webpack.config.js作为配置文件。可以根据不同的需求配置不同的config</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>Demo</h2>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>最简单的Webpack配置文件webpack.config.js如下所示：</h2>
<pre><code class="javascript">module.exports = {
  entry:[
    &#39;./app/main.js&#39;
  ],
  output: {
    path: __dirname + &#39;/dist/&#39;,
    publicPath: &quot;/dist/&quot;,
    filename: &#39;bundle.js&#39;
  }
};
</code></pre>
<ul>
<li>其中entry参数定义了打包后的入口文件，数组中的所有文件会打包生成一个filename文件</li>
<li>output参数定义了输出文件的位置</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>模块加载器</h2>
<ul>
<li>模块：静态的文件，比如：JavaScript，CSS，sass，TypeScript，JSX，CoffeeScript，图片等等</li>
<li>文件配置： 通过正则表达式对文件名进行匹配</li>
<li>对于不同的模块有其对应的模块加载器，它们可以进行串联</li>
</ul>
<pre><code class="javascript">module: {
    loaders: [{
        test: /\.s(a|c)ss$/,
        loader:  &#39;style-loader!css-loader!sass-loader&#39;
        }, {
            test: /\.(png|jpe?g)$/,
            loader: &#39;url-loader?limit=10000&amp;name=build/[name].[ext]&#39;
        }]
    }
}
</code></pre>
<ul>
<li>require()还支持在资源path前面指定loader，即require(![loaders list]![source path])形式<pre><code class="javascript">require(“style!css!sass!./mystyles.sass”);
</code></pre>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>复杂的配置---公共文件提取</h2>
<ul>
<li>使用了一个 CommonsChunkPlugin 的插件，它用于提取多个入口文件的公共脚本部分，然后生成一个 common.js 来方便多页面之间进行复用</li>
</ul>
<pre><code class="javascript">var CommonsChunkPlugin = require(&quot;webpack/lib/optimize/CommonsChunkPlugin&quot;);
module.exports = {
  entry: { a: &quot;./a&quot;, b: &quot;./b&quot; },
  output: { filename: &quot;[name].js&quot; },
  plugins: [ new CommonsChunkPlugin(&quot;common.js&quot;) ]
}
</code></pre>
<pre><code class="html">&lt;script src=&quot;common.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;a.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;b.js&quot;&gt;&lt;/script&gt;
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>有用的配置项</h2>
<ul>
<li><p><code>module.noParse</code>如果你确定一个模块中没有其它新的依赖, 就可以配置这项，webpack 将不再扫描这个文件中的依赖。</p>
<pre><code class="javascript">module: {
      loaders：[{ test: /\.css$/, loader: &#39;style-loader&#39;}],
      noParse: [/moment-with-locales/]
  }
</code></pre>
</li>
<li><p><code>resolve.alias</code> 是 Webpack 的一个配置项，它的作用是把用户的一个请求重定向到另一个路径</p>
<pre><code class="javascript">resolve: {
      extensions: [&#39;.js&#39;, &#39;.sass&#39;, &#39;.css&#39;],
      alias: {
          moment: &quot;moment/min/moment-with-locales.min.js&quot;
      }
  }
</code></pre>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>不同规范的模块加载实现（AMD、CommonJS、ES6）</h2>
<ul>
<li>CommonJS的require函数则是同步加载---使用require.ensure实现兼容</li>
<li>AMD是模块异步加载并保证执行顺序---使用require实现兼容</li>
<li>ES6中使用import实现模块的引入---使用Babel实现兼容</li>
</ul>
<blockquote>
<p>在Webpack中推荐CommonJS方式去加载模块，这种方式语法更加简洁直观。</p>
</blockquote>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>模块的引用</h2>
<ul>
<li>使用require方式直接引用静态文件</li>
<li><p>CSS 被转化为 style 标签</p>
<pre><code class="javascript">require(&#39;./myapp.sass&#39;);
 var myapp = require(&#39;./myapp.js&#39;);

 console.log(myapp);
</code></pre>
</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>图片的打包</h2>
<ul>
<li>使用require方式直接引用静态文件</li>
<li>url-loader可以帮助我们实现图片的封装打包，也可以通过require实现。</li>
<li>图片可能被转化成 base64 格式的 dataUrl</li>
</ul>
<pre><code class="javascript">div.img{
    background: url(../image/xxx.jpg)
}

//或者
var img = document.createElement(&quot;img&quot;);
img.src = require(&quot;../image/xxx.jpg&quot;);
document.body.appendChild(img);
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article>
<h2>css文件独立打包</h2>
<p>通常我们不想把样式打在脚本中，最好独立生成css文件，在页面中外链才好，这时可以使用插件extract-text-webpack-plugin</p>
<pre><code class="javascript">npm install extract-text-webpack-plugin –save-dev
</code></pre>
<pre><code class="javascript">plugins: [
    new ExtractTextPlugin(&#39;styles.css&#39;)
]
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>自动提取资源生成html文件</h1>
<ul>
<li>指定配置，编译时候自动生成引入资源的html文件：</li>
</ul>
<pre><code class="javascript">var HtmlWebpackPlugin = require(&#39;html-Webpack-plugin&#39;);
...
...

new HtmlWebpackPlugin({
    template: &#39;app/custom.html&#39;,
    filename: &#39;../custom.html&#39;,
    chunks: [&#39;vendors&#39;, &#39;mobile&#39;],
    inject: true,
    minify: {
        minifyJS: true,
        minifyCSS: true,
        collapseWhitespace: true,
        removeComments: true
    }
}
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>一个综合的例子</h1>
<pre><code class="javascript">import path from &#39;path&#39;;
import webpack from &#39;webpack&#39;;
import ExtractTextPlugin from &#39;extract-text-webpack-plugin&#39;;
import HtmlWebpackPlugin from &#39;html-webpack-plugin&#39;;
let node_modules = path.resolve(__dirname, &#39;node_modules&#39;);
let DEPLOY = process.env.webpack_deploy;
let entry = {
    mobile: path.resolve(__dirname, &#39;app/mobile.js&#39;)
};
let hotReload = true;
let chunks = Object.keys(entry);
let webpackConfig = {
    entry: entry,
    resolve: {
        modulesDirectories: [&quot;node_modules&quot;, &quot;bower_components&quot;]
    },
    output: {
        path: path.resolve(__dirname, &#39;dist/js&#39;),
        filename: &#39;[name].js?v=[hash:5]&#39;,
        publicPath: !DEPLOY ? &#39;js&#39; : &#39;http://www.imjiangtao.com&#39;
    },
    plugins: [
        new webpack.optimize.CommonsChunkPlugin({
            name: &#39;vendors&#39;,
            chunks: chunks,
            minChunks: chunks.length
        }),
        new ExtractTextPlugin(&#39;../css/styles.css&#39;),
        new HtmlWebpackPlugin({
            template: &#39;app/custom.html&#39;,
            filename: &#39;../custom.html&#39;,
            chunks: [&#39;vendors&#39;, &#39;mobile&#39;],
            inject: true,
            minify: {
                minifyJS: true,
                minifyCSS: true,
                collapseWhitespace: true,
                removeComments: true
            }
        }),
        new webpack.optimize.UglifyJsPlugin(),
        new webpack.NoErrorsPlugin()
    ],
    module: {
        loaders: [{
            test: /\.jsx?$/,
            loader: &#39;babel-loader&#39;,
            query: {
                //presets: [&#39;es2015&#39;, &#39;stage-0&#39;, &#39;react&#39;],
                //plugins: [&#39;transform-runtime&#39;]
            }
        }, {
            test: /\.css$/,
            loader: ExtractTextPlugin.extract(&quot;style-loader?minimize&quot;, &quot;css-loader?minimize&quot;)
        }, {
            test: /\.s(a|c)ss$/,
            loader: ExtractTextPlugin.extract(&#39;style-loader&#39;, &#39;css?minimize&#39;, &#39;sass-loader&#39;)
        }, {
            test: /\.(png|jpe?g)$/,
            loader: &#39;url-loader?limit=30000&#39;
        }, {
            test: /\.woff$/,
            loader: &#39;url-loader?limit=10240&#39;
        }],
        //noParse: [node_modules]
    }
};

export default webpackConfig;
</code></pre>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>总结和注意事项</h1>
<ul>
<li>webpack优势: <code>加载器配置</code>、<code>兼容多种模块规范</code>、<code>支持多种资源打包</code>、<code>独立模块和公共模块</code></li>
<li>gulp: 利用nodejs管道，配置简单，插件众多，插件编写简单</li>
<li>webpack + gulp 构造ES6/7工作流</li>
<li>使用babel(5.8.3和webpack时候注意使用稳定版本。(注: 2015/12/13)</li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>参考资料</h1>
<ul>
<li><a href="http://webpack.github.io/">webpack 官网</a></li>
<li><a href="http://gulpjs.com/">gulp</a></li>
<li><a href="http://babeljs.io/">babel</a></li>
<li><a href="https://github.com/ampedandwired/html-webpack-plugin">html-webpack-plugin</a></li>
<li><a href="https://github.com/kangax/html-minifier#options-quick-reference">html-minifier</a></li>
<li><a href="http://webpack.github.io/docs/webpack-dev-server.html">webpack-dev-server</a></li>
<li><a href="http://es6.ruanyifeng.com/">ES6入门</a></li>
<li><a href="http://www.w3ctech.com/topic/1513">2015: 前端工具现状</a></li>
</ul>

</article></section></slide>
<slide class="slide"><section class="slide-wrapper"><article class="flexbox vcenter">
<h1>Q &amp; A</h1>
<ul>
<li>Email: <a href="javascript: void 0">321jiangtao@gmail.com</a></li>
<li>Slide: <a href="http://jiangtao.github.io/shares/doc/es67workflow.htm">搭建ES6/7工作流搭建</a></li>
</ul>

</article></section></slide>
        

        <!-- <slide class="slide logoslide dark nobackground">
            <article class="flexbox vcenter">
                <h2 style="color: white;">Powered By nodePPT v1.4.2</h2>
            </article>
        </slide> -->
        <div class="slideTip" id="tip"></div>
    </slides>
</div>
<canvas id="drawBoard" class="draw-board" width="900" height="700"></canvas>
<div class="progress"><span id="progress"></span></div>
<div id="_buttons">
    <div class="_btn-box" id="_btn-box" style="display:none;">
        <button class="fa fa-arrow-circle-left" id="_btn-prev"></button>
        <button class="fa fa-arrow-circle-right" id="_btn-next"></button>
        <button class="fa fa-paint-brush" id="_btn-brush"></button>
        <button class="fa fa-compress" id="_btn-overview" data-toggle="fa fa-expand"></button>
    </div>
    <button class="fa fa-bars" id="_btn-bar"  data-toggle="fa fa-close"></button>
</div>
<script src="./js/mixjs/lib/mix.0.3.0.min.js"></script>
<script>
var base = location.protocol + '//' + location.host;

var path = (location.pathname + '#').split('/').filter(function(v){
    return !!v;
});
path.pop();
path = path.join('/');
MixJS.config({
    baseURL: [ base, path, 'js'].join('/')+'/'
});

</script>
<script src="./js/mixjs/lib/event/broadcast.js"></script>
<script src="./js/nodeppt.js"></script>
<script>
Slide.init({
    containerID: 'container',
    drawBoardID: 'drawBoard',
    slideClass: '.slide',
    buildClass: '.build',
    progressID: 'progress',
    transition: 'move',
    width: 1100,
    dir: './',
    
    //打开下面的注释就开启postMessage方式
    //访问网址127.0.0.1:8080/ppt/demo#client
    control:{
        type: 'postMessage',
        args:{
            isControl:  false
        }
    },
    
    tipID: 'tip'
});
MixJS.loadJS('highlight/highlight.pack.js',function(){
    hljs.tabReplace = '  ';
    hljs.initHighlightingOnLoad();
});
</script>
<link rel="stylesheet" href="./css/moon.css">
/img

<!--placeholder-->
</body>
</html>
